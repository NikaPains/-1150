#include <Servo.h>
#include <math.h>

//вводим константы
const  float L =82;
const  float L2 =82;
//л1 и л2 это длина руки манипулятора
const  float Ya =230; 
const float hs =55;  //высота подставки под манипулятор
const float Zc2 =82;  //длина от одного сервака до другого у руки
float Zc1 =68;  //растояние до стенки от хваталки
float Zcl=230;  //переменная для выкрутки, равная Zc1
//это углы альфа, бета, гамма, дельта, тета
float A=90; 
float B=0;
float V=90;
float D=90;
float T=90;
const float k=0.79;// начальный фактический угол в радианах(45 градусов)
float r=0;  //гипотенуза манипулятора
int array[5]={0,0,0,0,0};

struct servo
{
  int offset;
  int num;
  Servo s;
};

  //серво объявляем
servo s_x;
servo s_y;
servo s_z;
servo s_Zc1;
servo s_Zc2;



//структура (коорды по х и з)
//тут мы ее объявляем
struct Place
{
  float Xa; //координата х 
  float Za; //координата з
};
//объявление каждого болтика
/*Place odin;
Place dva;
Place tri;
Place chetyre;
Place pyat;
Place shest;
Place sem;
Place vosem;
Place devyat;
Place desyat;
Place odinnadcat;
Place dvenadcat;
Place trinadcat;
Place chetyrnadcat;
Place pyatnadcat;
Place shestnadcat;*/

void home(){
  s_x.s.write(s_x.offset);
  s_y.s.write(s_y.offset);//вниз
  s_z.s.write(s_z.offset);//больше 90 вниз
  s_Zc1.s.write(s_Zc1.offset); //больше 90 вниз
  s_Zc2.s.write(s_Zc2.offset); //меньше 90 влево
}

void setup()
{
  s_x.offset=90; 
  s_y.offset=39;
  s_z.offset=90; 
  s_Zc1.offset=90; 
  s_Zc2.offset=90; 
  s_x.num=1;
  s_y.num=2;
  s_z.num=3;
  s_Zc1.num=4;
  s_Zc2.num=5;
  s_x.s.attach(14);
  s_y.s.attach(15);
  s_z.s.attach(16);
  s_Zc1.s.attach(17);
  s_Zc2.s.attach(18);
  pinMode(14, OUTPUT);
  pinMode(15, OUTPUT);
  pinMode(16, OUTPUT);
  pinMode(17, OUTPUT);
  pinMode(18, OUTPUT);
  pinMode(20, OUTPUT);
  Serial.begin(9600);
  digitalWrite(20, HIGH);
  home();
  Serial.println(s_x.offset);
}

void execute(const servo& serv, float difference)
{
          int znach=serv.s.read();
          Serial.println(difference);
          if (difference<0){
              for (int i = znach; i>=znach-difference; i++)
              {
                serv.s.write(i);
                delay(10);
              } 
            }
          else {
            for (int i = znach; i>=znach+difference; i--)
            {
              serv.s.write(i);
              delay(50);
            }
          }    
}

void exeCUTE(const servo& serv, float difference)
{
          int znach=serv.s.read();
          if (difference>90){
              for (int i = znach; i<=difference+90; i++)
              {
                serv.s.write(i);
                delay(50);
              }
            }
          else if (difference<90) {
            for (int i = znach; i>=90-difference; i--)
            {
              serv.s.write(i);
              delay(50);
            }
          }
          else{
            asm("RET");
          }  
}

void doItAction(const servo& servo, float targetRad)
{
  switch(servo.num){
    case(1):
        {
          int targetDeg=round(degrees(targetRad));
          Serial.println(targetDeg);
          int raznitza=servo.s.read()-targetDeg;
          execute(s_x,raznitza); 
          break;
        }
    case(2):
      {
        int targetDeg=round(degrees(targetRad));
        Serial.println(targetDeg);
        int raznitza=90-targetDeg;
        execute(s_y,raznitza); 
        break;
      }
    case(3):
      {
        int targetDeg=round(degrees(targetRad));
        Serial.println(targetDeg);
        int raznitza=servo.s.read()-targetDeg;
        exeCUTE(s_z,raznitza); 
        break;
      }
    case(4):
      {
        int targetDeg=round(degrees(targetRad));
        Serial.println(targetDeg);
        int raznitza=180-targetDeg;
        exeCUTE(s_Zc1,raznitza); 
       break;
      }
    case(5):
      {
        int targetDeg=round(degrees(targetRad));
        Serial.println(targetDeg);
        int raznitza=servo.s.read()-targetDeg;
        execute(s_Zc2,raznitza); 
       break;
      }
  }
}


void action(float x, float z) //начинаем цикл, при этом вводим координаты по х и з
{

  float cA=0;
  float cB=0;
  float cC=0;
  float W=0;
  float PRZc2=0;  //проекция Zc2
  float c3=0;  //расстояние до Zc2
  V=atan(x/(Ya-Zc1));
  cA=Ya-Zc1;
  cB=sqrt(cA*cA+x*x)-L;
  cC=sqrt(cA*cA+x*x);
  c3=cA*cB/cC;
  W=atan((z-hs)/c3);
  B=acos((c3*c3+(z-hs)*(z-hs)-2*L*L)/(2*L*L));
  A=(3.14-B)/2;
  D=A-W;
  
  Serial.print("\nTest: ");
  Serial.println(V);
  Serial.println(cA);
  Serial.println(cB);
  Serial.println(cC);
  Serial.println(c3);
  Serial.println(W);
  Serial.println(B);
  Serial.println(A);
  Serial.println(D);
  
}
Place boltArray[] = {60.1, 170.1, 60.1, 49.9, -60.1, 49.9, -60.1, 170.1, 0, 167, 40.3, 150.3, 57, 110, 40.3, 69.7, 0, 53, -40.3, 69.7, -57, 110, -40.3, 150.3, 0, 135, 25, 110, 0, 85, -25, 110}; //массив штоб к ним обращаться 

Place getBolt(int nam)//это функция для получения названия болта
{
  Place bolt = boltArray[nam-1];
  return bolt;
}

bool start = true;
int input;
enum det {checkSerial = 0, checkArray, doActions};
byte determinant =  checkSerial;

int len = 0;
void loop()
{
  if ((determinant == checkSerial)&&(Serial.available()))
  {
    char c = Serial.read();
    if (c == 'k') determinant = checkArray;
  }

  if (determinant == checkArray)
  {
    if (Serial.available())
      for(int index = 0; index < 5; index++)
      {
        int znach=Serial.parseInt();              
        if (!(znach< 1 || znach>16))
        {
          array[index]=znach; 
          Serial.print(array[index]);  
          len++;       
        }
      } 
      if (len > 0) determinant = doActions;
  }
      
  if (determinant == doActions)
    {
      for(int pov=0;pov<=len;pov++){
        
      input = array[pov];
      
      Place bolt = getBolt(input);
      action(bolt.Xa, bolt.Za);  //непосредственно крутим
      doItAction(s_Zc2,V);
      doItAction(s_Zc1,D);
      doItAction(s_z,B);
      doItAction(s_y,A);
      doItAction(s_x,V);
      digitalWrite(20, HIGH);
      
      for(int vykrbolt=Zc1; vykrbolt<Zcl+40; vykrbolt+=10){
        Zc1=vykrbolt;
        Place bolt = getBolt(input);
        action(bolt.Xa, bolt.Za);
        
        doItAction(s_Zc2,V);
        doItAction(s_Zc1,D);
        doItAction(s_z,B);
        doItAction(s_x,V);
        doItAction(s_y,A);
      }
      Zc1=37;
      digitalWrite(20, LOW);
     }
    }
  Serial.println(determinant);
}
